import type { NextConfig } from "next"
import withPWA from "next-pwa"

const supabaseHost = process.env.NEXT_PUBLIC_SUPABASE_URL
  ? new URL(process.env.NEXT_PUBLIC_SUPABASE_URL).hostname
  : "your-supabase-project.supabase.co"

// Use unknown to avoid lint any; cast at call site to satisfy next-pwa
const pwaOptions: unknown = {
  dest: "public",
  register: true,
  skipWaiting: true,
  // Enable in dev only when explicitly allowed
  disable:
    process.env.NODE_ENV === "development" &&
    process.env.NEXT_PUBLIC_PWA_DEV !== "true",
  // Ensure our custom push handlers are imported into the generated SW
  // next-pwa forwards additional properties to Workbox GenerateSW
  // https://github.com/shadowwalker/next-pwa
  importScripts: ["/sw-custom.js"],
  runtimeCaching: [
    {
      // HTML navigations: network-first with offline fallback
      urlPattern: ({ request }: { request: Request }) =>
        request.mode === "navigate",
      handler: "NetworkFirst",
      options: {
        cacheName: "html-cache",
        networkTimeoutSeconds: 3,
        expiration: { maxEntries: 64, maxAgeSeconds: 7 * 24 * 60 * 60 },
        cacheableResponse: { statuses: [200] },
        // Serve offline page if both network and cache fail
        plugins: [
          {
            handlerDidError: async () => {
              try {
                const cache = await caches.open("html-cache")
                const cached = await cache.match("/offline")
                if (cached) return cached
              } catch {}
              return Response.error()
            },
          },
        ],
      },
    },
    {
      // Static assets: stale-while-revalidate
      urlPattern: ({ request }: { request: Request }) =>
        ["style", "script", "worker"].includes(request.destination),
      handler: "StaleWhileRevalidate",
      options: {
        cacheName: "asset-cache",
        expiration: { maxEntries: 128, maxAgeSeconds: 30 * 24 * 60 * 60 },
      },
    },
    {
      // Images: cache-first
      urlPattern: ({ request }: { request: Request }) =>
        request.destination === "image",
      handler: "CacheFirst",
      options: {
        cacheName: "image-cache",
        expiration: { maxEntries: 128, maxAgeSeconds: 30 * 24 * 60 * 60 },
        cacheableResponse: { statuses: [200] },
      },
    },
    {
      // API calls to Supabase REST: network-first
      urlPattern: ({ url }: { url: URL }) =>
        url.hostname.endsWith("supabase.co") && url.pathname.includes("/rest/"),
      handler: "NetworkFirst",
      options: {
        cacheName: "api-cache",
        networkTimeoutSeconds: 5,
        expiration: { maxEntries: 64, maxAgeSeconds: 60 * 60 },
      },
    },
  ],
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const withPWAFn = withPWA(pwaOptions as any)

const nextConfig: NextConfig = {
  images: {
    domains: [supabaseHost, "images.unsplash.com"],
  },
  async headers() {
    return [
      {
        // Global security headers
        source: "/(.*)",
        headers: [
          { key: "X-Content-Type-Options", value: "nosniff" },
          { key: "X-Frame-Options", value: "DENY" },
          {
            key: "Referrer-Policy",
            value: "strict-origin-when-cross-origin",
          },
        ],
      },
      {
        // Service worker script should not be cached aggressively
        source: "/sw.js",
        headers: [
          {
            key: "Cache-Control",
            value: "no-store, no-cache, must-revalidate",
          },
          { key: "X-Content-Type-Options", value: "nosniff" },
        ],
      },
      {
        // Workbox runtime script generated by next-pwa
        source: "/workbox-:hash.js",
        headers: [
          {
            key: "Cache-Control",
            value: "no-store, no-cache, must-revalidate",
          },
          { key: "X-Content-Type-Options", value: "nosniff" },
        ],
      },
    ]
  },
  async redirects() {
    return [
      { source: "/communities", destination: "/c", permanent: true },
      {
        source: "/communities/:path*",
        destination: "/c/:path*",
        permanent: true,
      },
      { source: "/dashboard", destination: "/d", permanent: true },
      { source: "/events", destination: "/w", permanent: true },
      { source: "/events/:path*", destination: "/w/:path*", permanent: true },
      { source: "/login", destination: "/l", permanent: true },
      { source: "/register", destination: "/r", permanent: true },
      { source: "/settings", destination: "/s", permanent: true },
      // Profile is now /u/:username; /profile can redirect to /u or homepage
      { source: "/profile", destination: "/u", permanent: false },
      // Keep /reset-password as a real page to preserve #type=recovery hash and forward client-side
      // Messaging removed; redirect old paths to home
      { source: "/messages", destination: "/", permanent: true },
      { source: "/messages/:path*", destination: "/", permanent: true },
    ]
  },
}

export default withPWAFn(nextConfig)
